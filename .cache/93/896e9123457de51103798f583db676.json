{"id":"node_modules/node-int64/Int64.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/node-int64/package.json","includedInParent":true,"mtime":1591602463062},{"name":"buffer","parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/node-int64/Int64.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n//     Int64.js\n//\n//     Copyright (c) 2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n/**\n * Support for handling 64-bit int numbers in Javascript (node.js)\n *\n * JS Numbers are IEEE-754 binary double-precision floats, which limits the\n * range of values that can be represented with integer precision to:\n *\n * 2^^53 <= N <= 2^53\n *\n * Int64 objects wrap a node Buffer that holds the 8-bytes of int64 data.  These\n * objects operate directly on the buffer which means that if they are created\n * using an existing buffer then setting the value will modify the Buffer, and\n * vice-versa.\n *\n * Internal Representation\n *\n * The internal buffer format is Big Endian.  I.e. the most-significant byte is\n * at buffer[0], the least-significant at buffer[7].  For the purposes of\n * converting to/from JS native numbers, the value is assumed to be a signed\n * integer stored in 2's complement form.\n *\n * For details about IEEE-754 see:\n * http://en.wikipedia.org/wiki/Double_precision_floating-point_format\n */\n\n// Useful masks and values for bit twiddling\nvar MASK31 =  0x7fffffff, VAL31 = 0x80000000;\nvar MASK32 =  0xffffffff, VAL32 = 0x100000000;\n\n// Map for converting hex octets to strings\nvar _HEX = [];\nfor (var i = 0; i < 256; i++) {\n  _HEX[i] = (i > 0xF ? '' : '0') + i.toString(16);\n}\n\n//\n// Int64\n//\n\n/**\n * Constructor accepts any of the following argument types:\n *\n * new Int64(buffer[, offset=0]) - Existing Buffer with byte offset\n * new Int64(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset\n * new Int64(string)             - Hex string (throws if n is outside int64 range)\n * new Int64(number)             - Number (throws if n is outside int64 range)\n * new Int64(hi, lo)             - Raw bits as two 32-bit values\n */\nvar Int64 = module.exports = function(a1, a2) {\n  if (a1 instanceof Buffer) {\n    this.buffer = a1;\n    this.offset = a2 || 0;\n  } else if (Object.prototype.toString.call(a1) == '[object Uint8Array]') {\n    // Under Browserify, Buffers can extend Uint8Arrays rather than an\n    // instance of Buffer. We could assume the passed in Uint8Array is actually\n    // a buffer but that won't handle the case where a raw Uint8Array is passed\n    // in. We construct a new Buffer just in case.\n    this.buffer = new Buffer(a1);\n    this.offset = a2 || 0;\n  } else {\n    this.buffer = this.buffer || new Buffer(8);\n    this.offset = 0;\n    this.setValue.apply(this, arguments);\n  }\n};\n\n\n// Max integer value that JS can accurately represent\nInt64.MAX_INT = Math.pow(2, 53);\n\n// Min integer value that JS can accurately represent\nInt64.MIN_INT = -Math.pow(2, 53);\n\nInt64.prototype = {\n\n  constructor: Int64,\n\n  /**\n   * Do in-place 2's compliment.  See\n   * http://en.wikipedia.org/wiki/Two's_complement\n   */\n  _2scomp: function() {\n    var b = this.buffer, o = this.offset, carry = 1;\n    for (var i = o + 7; i >= o; i--) {\n      var v = (b[i] ^ 0xff) + carry;\n      b[i] = v & 0xff;\n      carry = v >> 8;\n    }\n  },\n\n  /**\n   * Set the value. Takes any of the following arguments:\n   *\n   * setValue(string) - A hexidecimal string\n   * setValue(number) - Number (throws if n is outside int64 range)\n   * setValue(hi, lo) - Raw bits as two 32-bit values\n   */\n  setValue: function(hi, lo) {\n    var negate = false;\n    if (arguments.length == 1) {\n      if (typeof(hi) == 'number') {\n        // Simplify bitfield retrieval by using abs() value.  We restore sign\n        // later\n        negate = hi < 0;\n        hi = Math.abs(hi);\n        lo = hi % VAL32;\n        hi = hi / VAL32;\n        if (hi > VAL32) throw new RangeError(hi  + ' is outside Int64 range');\n        hi = hi | 0;\n      } else if (typeof(hi) == 'string') {\n        hi = (hi + '').replace(/^0x/, '');\n        lo = hi.substr(-8);\n        hi = hi.length > 8 ? hi.substr(0, hi.length - 8) : '';\n        hi = parseInt(hi, 16);\n        lo = parseInt(lo, 16);\n      } else {\n        throw new Error(hi + ' must be a Number or String');\n      }\n    }\n\n    // Technically we should throw if hi or lo is outside int32 range here, but\n    // it's not worth the effort. Anything past the 32'nd bit is ignored.\n\n    // Copy bytes to buffer\n    var b = this.buffer, o = this.offset;\n    for (var i = 7; i >= 0; i--) {\n      b[o+i] = lo & 0xff;\n      lo = i == 4 ? hi : lo >>> 8;\n    }\n\n    // Restore sign of passed argument\n    if (negate) this._2scomp();\n  },\n\n  /**\n   * Convert to a native JS number.\n   *\n   * WARNING: Do not expect this value to be accurate to integer precision for\n   * large (positive or negative) numbers!\n   *\n   * @param allowImprecise If true, no check is performed to verify the\n   * returned value is accurate to integer precision.  If false, imprecise\n   * numbers (very large positive or negative numbers) will be forced to +/-\n   * Infinity.\n   */\n  toNumber: function(allowImprecise) {\n    var b = this.buffer, o = this.offset;\n\n    // Running sum of octets, doing a 2's complement\n    var negate = b[o] & 0x80, x = 0, carry = 1;\n    for (var i = 7, m = 1; i >= 0; i--, m *= 256) {\n      var v = b[o+i];\n\n      // 2's complement for negative numbers\n      if (negate) {\n        v = (v ^ 0xff) + carry;\n        carry = v >> 8;\n        v = v & 0xff;\n      }\n\n      x += v * m;\n    }\n\n    // Return Infinity if we've lost integer precision\n    if (!allowImprecise && x >= Int64.MAX_INT) {\n      return negate ? -Infinity : Infinity;\n    }\n\n    return negate ? -x : x;\n  },\n\n  /**\n   * Convert to a JS Number. Returns +/-Infinity for values that can't be\n   * represented to integer precision.\n   */\n  valueOf: function() {\n    return this.toNumber(false);\n  },\n\n  /**\n   * Return string value\n   *\n   * @param radix Just like Number#toString()'s radix\n   */\n  toString: function(radix) {\n    return this.valueOf().toString(radix || 10);\n  },\n\n  /**\n   * Return a string showing the buffer octets, with MSB on the left.\n   *\n   * @param sep separator string. default is '' (empty string)\n   */\n  toOctetString: function(sep) {\n    var out = new Array(8);\n    var b = this.buffer, o = this.offset;\n    for (var i = 0; i < 8; i++) {\n      out[i] = _HEX[b[o+i]];\n    }\n    return out.join(sep || '');\n  },\n\n  /**\n   * Returns the int64's 8 bytes in a buffer.\n   *\n   * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if\n   *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.\n   */\n  toBuffer: function(rawBuffer) {\n    if (rawBuffer && this.offset === 0) return this.buffer;\n\n    var out = new Buffer(8);\n    this.buffer.copy(out, 0, this.offset, this.offset + 8);\n    return out;\n  },\n\n  /**\n   * Copy 8 bytes of int64 into target buffer at target offset.\n   *\n   * @param {Buffer} targetBuffer       Buffer to copy into.\n   * @param {number} [targetOffset=0]   Offset into target buffer.\n   */\n  copy: function(targetBuffer, targetOffset) {\n    this.buffer.copy(targetBuffer, targetOffset || 0, this.offset, this.offset + 8);\n  },\n\n  /**\n   * Returns a number indicating whether this comes before or after or is the\n   * same as the other in sort order.\n   *\n   * @param {Int64} other  Other Int64 to compare.\n   */\n  compare: function(other) {\n\n    // If sign bits differ ...\n    if ((this.buffer[this.offset] & 0x80) != (other.buffer[other.offset] & 0x80)) {\n      return other.buffer[other.offset] - this.buffer[this.offset];\n    }\n\n    // otherwise, compare bytes lexicographically\n    for (var i = 0; i < 8; i++) {\n      if (this.buffer[this.offset+i] !== other.buffer[other.offset+i]) {\n        return this.buffer[this.offset+i] - other.buffer[other.offset+i];\n      }\n    }\n    return 0;\n  },\n\n  /**\n   * Returns a boolean indicating if this integer is equal to other.\n   *\n   * @param {Int64} other  Other Int64 to compare.\n   */\n  equals: function(other) {\n    return this.compare(other) === 0;\n  },\n\n  /**\n   * Pretty output in console.log\n   */\n  inspect: function() {\n    return '[Int64 value:' + this + ' octets:' + this.toOctetString(' ') + ']';\n  }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/node-int64/Int64.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/node-int64/Int64.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}}],"sources":{"node_modules/node-int64/Int64.js":"//     Int64.js\n//\n//     Copyright (c) 2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n/**\n * Support for handling 64-bit int numbers in Javascript (node.js)\n *\n * JS Numbers are IEEE-754 binary double-precision floats, which limits the\n * range of values that can be represented with integer precision to:\n *\n * 2^^53 <= N <= 2^53\n *\n * Int64 objects wrap a node Buffer that holds the 8-bytes of int64 data.  These\n * objects operate directly on the buffer which means that if they are created\n * using an existing buffer then setting the value will modify the Buffer, and\n * vice-versa.\n *\n * Internal Representation\n *\n * The internal buffer format is Big Endian.  I.e. the most-significant byte is\n * at buffer[0], the least-significant at buffer[7].  For the purposes of\n * converting to/from JS native numbers, the value is assumed to be a signed\n * integer stored in 2's complement form.\n *\n * For details about IEEE-754 see:\n * http://en.wikipedia.org/wiki/Double_precision_floating-point_format\n */\n\n// Useful masks and values for bit twiddling\nvar MASK31 =  0x7fffffff, VAL31 = 0x80000000;\nvar MASK32 =  0xffffffff, VAL32 = 0x100000000;\n\n// Map for converting hex octets to strings\nvar _HEX = [];\nfor (var i = 0; i < 256; i++) {\n  _HEX[i] = (i > 0xF ? '' : '0') + i.toString(16);\n}\n\n//\n// Int64\n//\n\n/**\n * Constructor accepts any of the following argument types:\n *\n * new Int64(buffer[, offset=0]) - Existing Buffer with byte offset\n * new Int64(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset\n * new Int64(string)             - Hex string (throws if n is outside int64 range)\n * new Int64(number)             - Number (throws if n is outside int64 range)\n * new Int64(hi, lo)             - Raw bits as two 32-bit values\n */\nvar Int64 = module.exports = function(a1, a2) {\n  if (a1 instanceof Buffer) {\n    this.buffer = a1;\n    this.offset = a2 || 0;\n  } else if (Object.prototype.toString.call(a1) == '[object Uint8Array]') {\n    // Under Browserify, Buffers can extend Uint8Arrays rather than an\n    // instance of Buffer. We could assume the passed in Uint8Array is actually\n    // a buffer but that won't handle the case where a raw Uint8Array is passed\n    // in. We construct a new Buffer just in case.\n    this.buffer = new Buffer(a1);\n    this.offset = a2 || 0;\n  } else {\n    this.buffer = this.buffer || new Buffer(8);\n    this.offset = 0;\n    this.setValue.apply(this, arguments);\n  }\n};\n\n\n// Max integer value that JS can accurately represent\nInt64.MAX_INT = Math.pow(2, 53);\n\n// Min integer value that JS can accurately represent\nInt64.MIN_INT = -Math.pow(2, 53);\n\nInt64.prototype = {\n\n  constructor: Int64,\n\n  /**\n   * Do in-place 2's compliment.  See\n   * http://en.wikipedia.org/wiki/Two's_complement\n   */\n  _2scomp: function() {\n    var b = this.buffer, o = this.offset, carry = 1;\n    for (var i = o + 7; i >= o; i--) {\n      var v = (b[i] ^ 0xff) + carry;\n      b[i] = v & 0xff;\n      carry = v >> 8;\n    }\n  },\n\n  /**\n   * Set the value. Takes any of the following arguments:\n   *\n   * setValue(string) - A hexidecimal string\n   * setValue(number) - Number (throws if n is outside int64 range)\n   * setValue(hi, lo) - Raw bits as two 32-bit values\n   */\n  setValue: function(hi, lo) {\n    var negate = false;\n    if (arguments.length == 1) {\n      if (typeof(hi) == 'number') {\n        // Simplify bitfield retrieval by using abs() value.  We restore sign\n        // later\n        negate = hi < 0;\n        hi = Math.abs(hi);\n        lo = hi % VAL32;\n        hi = hi / VAL32;\n        if (hi > VAL32) throw new RangeError(hi  + ' is outside Int64 range');\n        hi = hi | 0;\n      } else if (typeof(hi) == 'string') {\n        hi = (hi + '').replace(/^0x/, '');\n        lo = hi.substr(-8);\n        hi = hi.length > 8 ? hi.substr(0, hi.length - 8) : '';\n        hi = parseInt(hi, 16);\n        lo = parseInt(lo, 16);\n      } else {\n        throw new Error(hi + ' must be a Number or String');\n      }\n    }\n\n    // Technically we should throw if hi or lo is outside int32 range here, but\n    // it's not worth the effort. Anything past the 32'nd bit is ignored.\n\n    // Copy bytes to buffer\n    var b = this.buffer, o = this.offset;\n    for (var i = 7; i >= 0; i--) {\n      b[o+i] = lo & 0xff;\n      lo = i == 4 ? hi : lo >>> 8;\n    }\n\n    // Restore sign of passed argument\n    if (negate) this._2scomp();\n  },\n\n  /**\n   * Convert to a native JS number.\n   *\n   * WARNING: Do not expect this value to be accurate to integer precision for\n   * large (positive or negative) numbers!\n   *\n   * @param allowImprecise If true, no check is performed to verify the\n   * returned value is accurate to integer precision.  If false, imprecise\n   * numbers (very large positive or negative numbers) will be forced to +/-\n   * Infinity.\n   */\n  toNumber: function(allowImprecise) {\n    var b = this.buffer, o = this.offset;\n\n    // Running sum of octets, doing a 2's complement\n    var negate = b[o] & 0x80, x = 0, carry = 1;\n    for (var i = 7, m = 1; i >= 0; i--, m *= 256) {\n      var v = b[o+i];\n\n      // 2's complement for negative numbers\n      if (negate) {\n        v = (v ^ 0xff) + carry;\n        carry = v >> 8;\n        v = v & 0xff;\n      }\n\n      x += v * m;\n    }\n\n    // Return Infinity if we've lost integer precision\n    if (!allowImprecise && x >= Int64.MAX_INT) {\n      return negate ? -Infinity : Infinity;\n    }\n\n    return negate ? -x : x;\n  },\n\n  /**\n   * Convert to a JS Number. Returns +/-Infinity for values that can't be\n   * represented to integer precision.\n   */\n  valueOf: function() {\n    return this.toNumber(false);\n  },\n\n  /**\n   * Return string value\n   *\n   * @param radix Just like Number#toString()'s radix\n   */\n  toString: function(radix) {\n    return this.valueOf().toString(radix || 10);\n  },\n\n  /**\n   * Return a string showing the buffer octets, with MSB on the left.\n   *\n   * @param sep separator string. default is '' (empty string)\n   */\n  toOctetString: function(sep) {\n    var out = new Array(8);\n    var b = this.buffer, o = this.offset;\n    for (var i = 0; i < 8; i++) {\n      out[i] = _HEX[b[o+i]];\n    }\n    return out.join(sep || '');\n  },\n\n  /**\n   * Returns the int64's 8 bytes in a buffer.\n   *\n   * @param {bool} [rawBuffer=false]  If no offset and this is true, return the internal buffer.  Should only be used if\n   *                                  you're discarding the Int64 afterwards, as it breaks encapsulation.\n   */\n  toBuffer: function(rawBuffer) {\n    if (rawBuffer && this.offset === 0) return this.buffer;\n\n    var out = new Buffer(8);\n    this.buffer.copy(out, 0, this.offset, this.offset + 8);\n    return out;\n  },\n\n  /**\n   * Copy 8 bytes of int64 into target buffer at target offset.\n   *\n   * @param {Buffer} targetBuffer       Buffer to copy into.\n   * @param {number} [targetOffset=0]   Offset into target buffer.\n   */\n  copy: function(targetBuffer, targetOffset) {\n    this.buffer.copy(targetBuffer, targetOffset || 0, this.offset, this.offset + 8);\n  },\n\n  /**\n   * Returns a number indicating whether this comes before or after or is the\n   * same as the other in sort order.\n   *\n   * @param {Int64} other  Other Int64 to compare.\n   */\n  compare: function(other) {\n\n    // If sign bits differ ...\n    if ((this.buffer[this.offset] & 0x80) != (other.buffer[other.offset] & 0x80)) {\n      return other.buffer[other.offset] - this.buffer[this.offset];\n    }\n\n    // otherwise, compare bytes lexicographically\n    for (var i = 0; i < 8; i++) {\n      if (this.buffer[this.offset+i] !== other.buffer[other.offset+i]) {\n        return this.buffer[this.offset+i] - other.buffer[other.offset+i];\n      }\n    }\n    return 0;\n  },\n\n  /**\n   * Returns a boolean indicating if this integer is equal to other.\n   *\n   * @param {Int64} other  Other Int64 to compare.\n   */\n  equals: function(other) {\n    return this.compare(other) === 0;\n  },\n\n  /**\n   * Pretty output in console.log\n   */\n  inspect: function() {\n    return '[Int64 value:' + this + ' octets:' + this.toOctetString(' ') + ']';\n  }\n};\n"},"lineCount":270}},"error":null,"hash":"7c10ed03b67d7fcf1aad12443d5543a9","cacheData":{"env":{}}}