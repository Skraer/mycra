{"id":"node_modules/opener/lib/opener.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/opener/package.json","includedInParent":true,"mtime":1591602462977},{"name":"child_process","loc":{"line":2,"column":27},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/opener/lib/opener.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"os","loc":{"line":3,"column":17},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/opener/lib/opener.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/os-browserify/browser.js"},{"name":"process","parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/opener/lib/opener.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\nvar childProcess = require(\"child_process\");\nvar os = require(\"os\");\n\nmodule.exports = function opener(args, options, callback) {\n    var platform = process.platform;\n\n    // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n    // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n    // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n    if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n        platform = \"win32\";\n    }\n\n    // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n    var command;\n    switch (platform) {\n        case \"win32\": {\n            command = \"cmd.exe\";\n            break;\n        }\n        case \"darwin\": {\n            command = \"open\";\n            break;\n        }\n        default: {\n            command = \"xdg-open\";\n            break;\n        }\n    }\n\n    if (typeof args === \"string\") {\n        args = [args];\n    }\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (options && typeof options === \"object\" && options.command) {\n        if (platform === \"win32\") {\n            // *always* use cmd on windows\n            args = [options.command].concat(args);\n        } else {\n            command = options.command;\n        }\n    }\n\n    if (platform === \"win32\") {\n        // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n        // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n        // responsibility to \"cmd /c\", which has that logic built in.\n        //\n        // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n        // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n        //\n        // Additionally, on Windows ampersand needs to be escaped when passed to \"start\"\n        args = args.map(function (value) {\n            return value.replace(/&/g, \"^&\");\n        });\n        args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n    }\n\n    return childProcess.execFile(command, args, options, callback);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/opener/lib/opener.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/opener/lib/opener.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}}],"sources":{"node_modules/opener/lib/opener.js":"\"use strict\";\nvar childProcess = require(\"child_process\");\nvar os = require(\"os\");\n\nmodule.exports = function opener(args, options, callback) {\n    var platform = process.platform;\n\n    // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n    // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n    // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n    if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n        platform = \"win32\";\n    }\n\n    // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n    var command;\n    switch (platform) {\n        case \"win32\": {\n            command = \"cmd.exe\";\n            break;\n        }\n        case \"darwin\": {\n            command = \"open\";\n            break;\n        }\n        default: {\n            command = \"xdg-open\";\n            break;\n        }\n    }\n\n    if (typeof args === \"string\") {\n        args = [args];\n    }\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (options && typeof options === \"object\" && options.command) {\n        if (platform === \"win32\") {\n            // *always* use cmd on windows\n            args = [options.command].concat(args);\n        } else {\n            command = options.command;\n        }\n    }\n\n    if (platform === \"win32\") {\n        // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n        // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n        // responsibility to \"cmd /c\", which has that logic built in.\n        //\n        // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n        // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n        //\n        // Additionally, on Windows ampersand needs to be escaped when passed to \"start\"\n        args = args.map(function (value) {\n            return value.replace(/&/g, \"^&\");\n        });\n        args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n    }\n\n    return childProcess.execFile(command, args, options, callback);\n};\n"},"lineCount":68}},"error":null,"hash":"3d4f13b82c9e45e89aca73b8f142aa7e","cacheData":{"env":{}}}