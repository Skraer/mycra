{"id":"node_modules/svg-baker/node_modules/postcss/lib/rule.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/package.json","includedInParent":true,"mtime":1591622454630},{"name":"./container","loc":{"line":7,"column":25},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/lib/rule.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/lib/container.js"},{"name":"./warn-once","loc":{"line":11,"column":24},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/lib/rule.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/lib/warn-once.js"},{"name":"./list","loc":{"line":15,"column":20},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/lib/rule.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/node_modules/postcss/lib/list.js"}],"generated":{"js":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _warnOnce = require('./warn-once');\n\nvar _warnOnce2 = _interopRequireDefault(_warnOnce);\n\nvar _list = require('./list');\n\nvar _list2 = _interopRequireDefault(_list);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{}');\n * const rule = root.first;\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n */\n\n\nvar Rule = function (_Container) {\n  _inherits(Rule, _Container);\n\n  function Rule(defaults) {\n    _classCallCheck(this, Rule);\n\n    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));\n\n    _this.type = 'rule';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n  /**\n   * An array containing the rule’s individual selectors.\n   * Groups of selectors are split at commas.\n   *\n   * @type {string[]}\n   *\n   * @example\n   * const root = postcss.parse('a, b { }');\n   * const rule = root.first;\n   *\n   * rule.selector  //=> 'a, b'\n   * rule.selectors //=> ['a', 'b']\n   *\n   * rule.selectors = ['a', 'strong'];\n   * rule.selector //=> 'a, strong'\n   */\n\n\n  _createClass(Rule, [{\n    key: 'selectors',\n    get: function get() {\n      return _list2.default.comma(this.selector);\n    },\n    set: function set(values) {\n      var match = this.selector ? this.selector.match(/,\\s*/) : null;\n      var sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');\n      this.selector = values.join(sep);\n    }\n  }, {\n    key: '_selector',\n    get: function get() {\n      (0, _warnOnce2.default)('Rule#_selector is deprecated. Use Rule#raws.selector');\n      return this.raws.selector;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('Rule#_selector is deprecated. Use Rule#raws.selector');\n      this.raws.selector = val;\n    }\n    /**\n     * @memberof Rule#\n     * @member {string} selector - the rule’s full selector represented\n     *                             as a string\n     *\n     * @example\n     * const root = postcss.parse('a, b { }');\n     * const rule = root.first;\n     * rule.selector //=> 'a, b'\n     */\n\n    /**\n     * @memberof Rule#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `after`: the space symbols after the last child of the node\n     *   to the end of the node.\n     * * `between`: the symbols between the property and value\n     *   for declarations, selector and `{` for rules, or last parameter\n     *   and `{` for at-rules.\n     * * `semicolon`: contains true if the last child has\n     *   an (optional) semicolon.\n     *\n     * PostCSS cleans selectors from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('a {\\n  color:black\\n}')\n     * root.first.first.raws //=> { before: '', between: ' ', after: '\\n' }\n     */\n\n  }]);\n\n  return Rule;\n}(_container2.default);\n\nexports.default = Rule;\nmodule.exports = exports['default'];"},"sourceMaps":{"js":{"mappings":[{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":0}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":4}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":14}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":17}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":24}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":25}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":38}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":25,"column":39}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":0}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":4}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":13}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":16}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":23}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":24}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":37}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":29,"column":38}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":0}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":4}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":9}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":12}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":19}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":20}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":28}},{"source":"rule.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":33,"column":29}},{"source":"rule.es6","name":null,"original":{"line":5,"column":0},"generated":{"line":72,"column":0}},{"source":"rule.es6","name":"Rule","original":{"line":16,"column":6},"generated":{"line":85,"column":4}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":88,"column":0}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":88,"column":11}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":88,"column":15}},{"source":"rule.es6","name":"defaults","original":{"line":18,"column":16},"generated":{"line":88,"column":16}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":88,"column":24}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":88,"column":26}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":0}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":4}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":19}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":20}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":24}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":26}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":30}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":89,"column":31}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":0}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":8}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":13}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":16}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":42}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":43}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":47}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":49}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":59}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":60}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":64}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":65}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":69}},{"source":"rule.es6","name":"defaults","original":{"line":19,"column":14},"generated":{"line":91,"column":71}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":91,"column":79}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":80}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":91,"column":81}},{"source":"rule.es6","name":null,"original":{"line":20,"column":8},"generated":{"line":93,"column":0}},{"source":"rule.es6","name":null,"original":{"line":20,"column":8},"generated":{"line":93,"column":4}},{"source":"rule.es6","name":null,"original":{"line":20,"column":8},"generated":{"line":93,"column":9}},{"source":"rule.es6","name":"type","original":{"line":20,"column":13},"generated":{"line":93,"column":10}},{"source":"rule.es6","name":null,"original":{"line":20,"column":8},"generated":{"line":93,"column":14}},{"source":"rule.es6","name":null,"original":{"line":20,"column":20},"generated":{"line":93,"column":17}},{"source":"rule.es6","name":null,"original":{"line":20,"column":8},"generated":{"line":93,"column":23}},{"source":"rule.es6","name":null,"original":{"line":21,"column":8},"generated":{"line":94,"column":0}},{"source":"rule.es6","name":null,"original":{"line":21,"column":13},"generated":{"line":94,"column":8}},{"source":"rule.es6","name":null,"original":{"line":21,"column":14},"generated":{"line":94,"column":9}},{"source":"rule.es6","name":null,"original":{"line":21,"column":14},"generated":{"line":94,"column":14}},{"source":"rule.es6","name":"nodes","original":{"line":21,"column":19},"generated":{"line":94,"column":15}},{"source":"rule.es6","name":null,"original":{"line":21,"column":8},"generated":{"line":94,"column":20}},{"source":"rule.es6","name":null,"original":{"line":21,"column":27},"generated":{"line":94,"column":22}},{"source":"rule.es6","name":null,"original":{"line":21,"column":27},"generated":{"line":94,"column":27}},{"source":"rule.es6","name":"nodes","original":{"line":21,"column":32},"generated":{"line":94,"column":28}},{"source":"rule.es6","name":null,"original":{"line":21,"column":27},"generated":{"line":94,"column":33}},{"source":"rule.es6","name":null,"original":{"line":21,"column":40},"generated":{"line":94,"column":36}},{"source":"rule.es6","name":null,"original":{"line":21,"column":27},"generated":{"line":94,"column":38}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":95,"column":0}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":95,"column":11}},{"source":"rule.es6","name":null,"original":{"line":18,"column":26},"generated":{"line":95,"column":16}},{"source":"rule.es6","name":null,"original":{"line":22,"column":5},"generated":{"line":96,"column":0}},{"source":"rule.es6","name":null,"original":{"line":24,"column":4},"generated":{"line":97,"column":0}},{"source":"rule.es6","name":null,"original":{"line":40,"column":20},"generated":{"line":117,"column":24}},{"source":"rule.es6","name":null,"original":{"line":41,"column":8},"generated":{"line":118,"column":0}},{"source":"rule.es6","name":null,"original":{"line":41,"column":15},"generated":{"line":118,"column":13}},{"source":"rule.es6","name":null,"original":{"line":41,"column":15},"generated":{"line":118,"column":19}},{"source":"rule.es6","name":null,"original":{"line":41,"column":15},"generated":{"line":118,"column":20}},{"source":"rule.es6","name":null,"original":{"line":41,"column":15},"generated":{"line":118,"column":27}},{"source":"rule.es6","name":"comma","original":{"line":41,"column":20},"generated":{"line":118,"column":28}},{"source":"rule.es6","name":null,"original":{"line":41,"column":15},"generated":{"line":118,"column":33}},{"source":"rule.es6","name":null,"original":{"line":41,"column":26},"generated":{"line":118,"column":34}},{"source":"rule.es6","name":"selector","original":{"line":41,"column":31},"generated":{"line":118,"column":39}},{"source":"rule.es6","name":null,"original":{"line":41,"column":15},"generated":{"line":118,"column":47}},{"source":"rule.es6","name":null,"original":{"line":41,"column":8},"generated":{"line":118,"column":48}},{"source":"rule.es6","name":"values","original":{"line":44,"column":18},"generated":{"line":120,"column":22}},{"source":"rule.es6","name":null,"original":{"line":44,"column":26},"generated":{"line":120,"column":30}},{"source":"rule.es6","name":null,"original":{"line":45,"column":8},"generated":{"line":121,"column":0}},{"source":"rule.es6","name":"match","original":{"line":45,"column":12},"generated":{"line":121,"column":10}},{"source":"rule.es6","name":"match","original":{"line":45,"column":12},"generated":{"line":121,"column":15}},{"source":"rule.es6","name":null,"original":{"line":45,"column":20},"generated":{"line":121,"column":18}},{"source":"rule.es6","name":"selector","original":{"line":45,"column":25},"generated":{"line":121,"column":23}},{"source":"rule.es6","name":null,"original":{"line":45,"column":20},"generated":{"line":121,"column":31}},{"source":"rule.es6","name":null,"original":{"line":45,"column":36},"generated":{"line":121,"column":34}},{"source":"rule.es6","name":"selector","original":{"line":45,"column":41},"generated":{"line":121,"column":39}},{"source":"rule.es6","name":null,"original":{"line":45,"column":36},"generated":{"line":121,"column":47}},{"source":"rule.es6","name":"match","original":{"line":45,"column":50},"generated":{"line":121,"column":48}},{"source":"rule.es6","name":null,"original":{"line":45,"column":36},"generated":{"line":121,"column":53}},{"source":"rule.es6","name":null,"original":{"line":45,"column":56},"generated":{"line":121,"column":54}},{"source":"rule.es6","name":null,"original":{"line":45,"column":36},"generated":{"line":121,"column":60}},{"source":"rule.es6","name":null,"original":{"line":45,"column":20},"generated":{"line":121,"column":61}},{"source":"rule.es6","name":null,"original":{"line":45,"column":66},"generated":{"line":121,"column":64}},{"source":"rule.es6","name":null,"original":{"line":45,"column":8},"generated":{"line":121,"column":68}},{"source":"rule.es6","name":null,"original":{"line":46,"column":8},"generated":{"line":122,"column":0}},{"source":"rule.es6","name":"sep","original":{"line":46,"column":12},"generated":{"line":122,"column":10}},{"source":"rule.es6","name":"sep","original":{"line":46,"column":12},"generated":{"line":122,"column":13}},{"source":"rule.es6","name":"match","original":{"line":46,"column":20},"generated":{"line":122,"column":16}},{"source":"rule.es6","name":"match","original":{"line":46,"column":20},"generated":{"line":122,"column":21}},{"source":"rule.es6","name":"match","original":{"line":46,"column":28},"generated":{"line":122,"column":24}},{"source":"rule.es6","name":"match","original":{"line":46,"column":28},"generated":{"line":122,"column":29}},{"source":"rule.es6","name":null,"original":{"line":46,"column":34},"generated":{"line":122,"column":30}},{"source":"rule.es6","name":"match","original":{"line":46,"column":28},"generated":{"line":122,"column":31}},{"source":"rule.es6","name":"match","original":{"line":46,"column":20},"generated":{"line":122,"column":32}},{"source":"rule.es6","name":null,"original":{"line":46,"column":39},"generated":{"line":122,"column":35}},{"source":"rule.es6","name":null,"original":{"line":46,"column":45},"generated":{"line":122,"column":41}},{"source":"rule.es6","name":"raw","original":{"line":46,"column":50},"generated":{"line":122,"column":46}},{"source":"rule.es6","name":null,"original":{"line":46,"column":45},"generated":{"line":122,"column":49}},{"source":"rule.es6","name":null,"original":{"line":46,"column":54},"generated":{"line":122,"column":50}},{"source":"rule.es6","name":null,"original":{"line":46,"column":45},"generated":{"line":122,"column":59}},{"source":"rule.es6","name":null,"original":{"line":46,"column":65},"generated":{"line":122,"column":61}},{"source":"rule.es6","name":null,"original":{"line":46,"column":45},"generated":{"line":122,"column":73}},{"source":"rule.es6","name":null,"original":{"line":46,"column":8},"generated":{"line":122,"column":74}},{"source":"rule.es6","name":null,"original":{"line":47,"column":8},"generated":{"line":123,"column":0}},{"source":"rule.es6","name":"selector","original":{"line":47,"column":13},"generated":{"line":123,"column":11}},{"source":"rule.es6","name":null,"original":{"line":47,"column":8},"generated":{"line":123,"column":19}},{"source":"rule.es6","name":"values","original":{"line":47,"column":24},"generated":{"line":123,"column":22}},{"source":"rule.es6","name":"values","original":{"line":47,"column":24},"generated":{"line":123,"column":28}},{"source":"rule.es6","name":"join","original":{"line":47,"column":31},"generated":{"line":123,"column":29}},{"source":"rule.es6","name":"values","original":{"line":47,"column":24},"generated":{"line":123,"column":33}},{"source":"rule.es6","name":"sep","original":{"line":47,"column":36},"generated":{"line":123,"column":34}},{"source":"rule.es6","name":"values","original":{"line":47,"column":24},"generated":{"line":123,"column":37}},{"source":"rule.es6","name":null,"original":{"line":47,"column":8},"generated":{"line":123,"column":38}},{"source":"rule.es6","name":null,"original":{"line":48,"column":5},"generated":{"line":124,"column":0}},{"source":"rule.es6","name":null,"original":{"line":50,"column":20},"generated":{"line":127,"column":24}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":0}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":7}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":10}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":20}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":21}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":28}},{"source":"rule.es6","name":null,"original":{"line":51,"column":17},"generated":{"line":128,"column":30}},{"source":"rule.es6","name":null,"original":{"line":51,"column":8},"generated":{"line":128,"column":84}},{"source":"rule.es6","name":null,"original":{"line":52,"column":8},"generated":{"line":129,"column":0}},{"source":"rule.es6","name":null,"original":{"line":52,"column":15},"generated":{"line":129,"column":13}},{"source":"rule.es6","name":"raws","original":{"line":52,"column":20},"generated":{"line":129,"column":18}},{"source":"rule.es6","name":null,"original":{"line":52,"column":15},"generated":{"line":129,"column":22}},{"source":"rule.es6","name":"selector","original":{"line":52,"column":25},"generated":{"line":129,"column":23}},{"source":"rule.es6","name":null,"original":{"line":52,"column":8},"generated":{"line":129,"column":31}},{"source":"rule.es6","name":"val","original":{"line":55,"column":18},"generated":{"line":131,"column":22}},{"source":"rule.es6","name":null,"original":{"line":55,"column":23},"generated":{"line":131,"column":27}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":0}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":7}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":10}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":20}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":21}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":28}},{"source":"rule.es6","name":null,"original":{"line":56,"column":17},"generated":{"line":132,"column":30}},{"source":"rule.es6","name":null,"original":{"line":56,"column":8},"generated":{"line":132,"column":84}},{"source":"rule.es6","name":null,"original":{"line":57,"column":8},"generated":{"line":133,"column":0}},{"source":"rule.es6","name":"raws","original":{"line":57,"column":13},"generated":{"line":133,"column":11}},{"source":"rule.es6","name":null,"original":{"line":57,"column":8},"generated":{"line":133,"column":15}},{"source":"rule.es6","name":"selector","original":{"line":57,"column":18},"generated":{"line":133,"column":16}},{"source":"rule.es6","name":null,"original":{"line":57,"column":8},"generated":{"line":133,"column":24}},{"source":"rule.es6","name":"val","original":{"line":57,"column":29},"generated":{"line":133,"column":27}},{"source":"rule.es6","name":null,"original":{"line":57,"column":8},"generated":{"line":133,"column":30}},{"source":"rule.es6","name":null,"original":{"line":58,"column":5},"generated":{"line":134,"column":0}},{"source":"rule.es6","name":null,"original":{"line":60,"column":4},"generated":{"line":135,"column":0}},{"source":"rule.es6","name":null,"original":{"line":71,"column":4},"generated":{"line":146,"column":0}},{"source":"rule.es6","name":"Rule","original":{"line":101,"column":15},"generated":{"line":179,"column":18}}],"sources":{"rule.es6":"import Container from './container';\nimport warnOnce  from './warn-once';\nimport list      from './list';\n\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{}');\n * const rule = root.first;\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n */\nclass Rule extends Container {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'rule';\n        if ( !this.nodes ) this.nodes = [];\n    }\n\n    /**\n     * An array containing the rule’s individual selectors.\n     * Groups of selectors are split at commas.\n     *\n     * @type {string[]}\n     *\n     * @example\n     * const root = postcss.parse('a, b { }');\n     * const rule = root.first;\n     *\n     * rule.selector  //=> 'a, b'\n     * rule.selectors //=> ['a', 'b']\n     *\n     * rule.selectors = ['a', 'strong'];\n     * rule.selector //=> 'a, strong'\n     */\n    get selectors() {\n        return list.comma(this.selector);\n    }\n\n    set selectors(values) {\n        let match = this.selector ? this.selector.match(/,\\s*/) : null;\n        let sep   = match ? match[0] : ',' + this.raw('between', 'beforeOpen');\n        this.selector = values.join(sep);\n    }\n\n    get _selector() {\n        warnOnce('Rule#_selector is deprecated. Use Rule#raws.selector');\n        return this.raws.selector;\n    }\n\n    set _selector(val) {\n        warnOnce('Rule#_selector is deprecated. Use Rule#raws.selector');\n        this.raws.selector = val;\n    }\n\n    /**\n     * @memberof Rule#\n     * @member {string} selector - the rule’s full selector represented\n     *                             as a string\n     *\n     * @example\n     * const root = postcss.parse('a, b { }');\n     * const rule = root.first;\n     * rule.selector //=> 'a, b'\n     */\n\n    /**\n     * @memberof Rule#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `after`: the space symbols after the last child of the node\n     *   to the end of the node.\n     * * `between`: the symbols between the property and value\n     *   for declarations, selector and `{` for rules, or last parameter\n     *   and `{` for at-rules.\n     * * `semicolon`: contains true if the last child has\n     *   an (optional) semicolon.\n     *\n     * PostCSS cleans selectors from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('a {\\n  color:black\\n}')\n     * root.first.first.raws //=> { before: '', between: ' ', after: '\\n' }\n     */\n\n}\n\nexport default Rule;\n"},"lineCount":null}},"error":null,"hash":"251e6f68778979ff43aa70c09c2c13d8","cacheData":{"env":{}}}