{"id":"node_modules/@bcoe/v8-coverage/dist/lib/compare.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Compares two script coverages.\n *\n * The result corresponds to the comparison of their `url` value (alphabetical sort).\n */\nfunction compareScriptCovs(a, b) {\n    if (a.url === b.url) {\n        return 0;\n    }\n    else if (a.url < b.url) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n}\nexports.compareScriptCovs = compareScriptCovs;\n/**\n * Compares two function coverages.\n *\n * The result corresponds to the comparison of the root ranges.\n */\nfunction compareFunctionCovs(a, b) {\n    return compareRangeCovs(a.ranges[0], b.ranges[0]);\n}\nexports.compareFunctionCovs = compareFunctionCovs;\n/**\n * Compares two range coverages.\n *\n * The ranges are first ordered by ascending `startOffset` and then by\n * descending `endOffset`.\n * This corresponds to a pre-order tree traversal.\n */\nfunction compareRangeCovs(a, b) {\n    if (a.startOffset !== b.startOffset) {\n        return a.startOffset - b.startOffset;\n    }\n    else {\n        return b.endOffset - a.endOffset;\n    }\n}\nexports.compareRangeCovs = compareRangeCovs;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["_src/compare.ts"],"names":[],"mappings":";;AAEA;;;;GAIG;AACH,SAAgB,iBAAiB,CAAC,CAAsB,EAAE,CAAsB;IAC9E,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;QACnB,OAAO,CAAC,CAAC;KACV;SAAM,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;QACxB,OAAO,CAAC,CAAC,CAAC;KACX;SAAM;QACL,OAAO,CAAC,CAAC;KACV;AACH,CAAC;AARD,8CAQC;AAED;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,CAAwB,EAAE,CAAwB;IACpF,OAAO,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC;AAFD,kDAEC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,CAAqB,EAAE,CAAqB;IAC3E,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,EAAE;QACnC,OAAO,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;KACtC;SAAM;QACL,OAAO,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;KAClC;AACH,CAAC;AAND,4CAMC","file":"compare.js","sourcesContent":["import { FunctionCov, RangeCov, ScriptCov } from \"./types\";\n\n/**\n * Compares two script coverages.\n *\n * The result corresponds to the comparison of their `url` value (alphabetical sort).\n */\nexport function compareScriptCovs(a: Readonly<ScriptCov>, b: Readonly<ScriptCov>): number {\n  if (a.url === b.url) {\n    return 0;\n  } else if (a.url < b.url) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * Compares two function coverages.\n *\n * The result corresponds to the comparison of the root ranges.\n */\nexport function compareFunctionCovs(a: Readonly<FunctionCov>, b: Readonly<FunctionCov>): number {\n  return compareRangeCovs(a.ranges[0], b.ranges[0]);\n}\n\n/**\n * Compares two range coverages.\n *\n * The ranges are first ordered by ascending `startOffset` and then by\n * descending `endOffset`.\n * This corresponds to a pre-order tree traversal.\n */\nexport function compareRangeCovs(a: Readonly<RangeCov>, b: Readonly<RangeCov>): number {\n  if (a.startOffset !== b.startOffset) {\n    return a.startOffset - b.startOffset;\n  } else {\n    return b.endOffset - a.endOffset;\n  }\n}\n"],"sourceRoot":""}},"error":null,"hash":"638bd980f78f3e42f5cf8698e2a59aef","cacheData":{"env":{}}}