{"id":"node_modules/svg-baker/lib/sprite.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/package.json","includedInParent":true,"mtime":1591622454621},{"name":"posthtml-svg-mode","loc":{"line":1,"column":29},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/lib/sprite.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/posthtml-svg-mode/lib/processor.js"},{"name":"./sprite-factory","loc":{"line":2,"column":31},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/lib/sprite.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/svg-baker/lib/sprite-factory.js"}],"generated":{"js":"const { renderer } = require('posthtml-svg-mode');\nconst defaultFactory = require('./sprite-factory');\n\nclass Sprite {\n  constructor({ tree, filename }) {\n    this.tree = tree;\n    this.filename = filename;\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Array<SpriteSymbol>} options.symbols\n   * @param {string} options.filename Output sprite filename\n   * @param {Function<Promise<PostHTMLProcessingResult>>} [options.factory]\n   * @return {Promise<Sprite>}\n   */\n  static create(options) {\n    const { symbols, filename, factory = defaultFactory } = options;\n    return factory({ symbols }).then(({ tree }) => new Sprite({ tree, filename }));\n  }\n\n  /**\n   * @return {string}\n   */\n  render() {\n    return renderer(this.tree);\n  }\n}\n\nmodule.exports = Sprite;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/svg-baker/lib/sprite.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"node_modules/svg-baker/lib/sprite.js":"const { renderer } = require('posthtml-svg-mode');\nconst defaultFactory = require('./sprite-factory');\n\nclass Sprite {\n  constructor({ tree, filename }) {\n    this.tree = tree;\n    this.filename = filename;\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Array<SpriteSymbol>} options.symbols\n   * @param {string} options.filename Output sprite filename\n   * @param {Function<Promise<PostHTMLProcessingResult>>} [options.factory]\n   * @return {Promise<Sprite>}\n   */\n  static create(options) {\n    const { symbols, filename, factory = defaultFactory } = options;\n    return factory({ symbols }).then(({ tree }) => new Sprite({ tree, filename }));\n  }\n\n  /**\n   * @return {string}\n   */\n  render() {\n    return renderer(this.tree);\n  }\n}\n\nmodule.exports = Sprite;\n"},"lineCount":31}},"error":null,"hash":"f44d9f94e228a2e4854e4e3f87996802","cacheData":{"env":{}}}