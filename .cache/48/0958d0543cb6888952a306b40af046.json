{"id":"node_modules/dns-txt/index.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/dns-txt/package.json","includedInParent":true,"mtime":1591602463707},{"name":"buffer-indexof","loc":{"line":3,"column":23},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/dns-txt/index.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/buffer-indexof/index.js"},{"name":"buffer","parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/dns-txt/index.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\n\nvar bindexOf = require('buffer-indexof')\n\nvar equalSign = new Buffer('=')\n\nmodule.exports = function (opts) {\n  var binary = opts ? opts.binary : false\n  var that = {}\n\n  that.encode = function (data, buf, offset) {\n    if (!data) data = {}\n    if (!offset) offset = 0\n    if (!buf) buf = new Buffer(that.encodingLength(data) + offset)\n\n    var oldOffset = offset\n    var keys = Object.keys(data)\n\n    if (keys.length === 0) {\n      buf[offset] = 0\n      offset++\n    }\n\n    keys.forEach(function (key) {\n      var val = data[key]\n      var oldOffset = offset\n      offset++\n\n      if (val === true) {\n        offset += buf.write(key, offset)\n      } else if (Buffer.isBuffer(val)) {\n        offset += buf.write(key + '=', offset)\n        var len = val.length\n        val.copy(buf, offset, 0, len)\n        offset += len\n      } else {\n        offset += buf.write(key + '=' + val, offset)\n      }\n\n      buf[oldOffset] = offset - oldOffset - 1\n    })\n\n    that.encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  that.decode = function (buf, offset, len) {\n    if (!offset) offset = 0\n    if (!Number.isFinite(len)) len = buf.length\n    var data = {}\n    var oldOffset = offset\n\n    while (offset < len) {\n      var b = decodeBlock(buf, offset)\n      var i = bindexOf(b, equalSign)\n      offset += decodeBlock.bytes\n\n      if (b.length === 0) continue // ignore: most likely a single zero byte\n      if (i === -1) data[b.toString().toLowerCase()] = true\n      else if (i === 0) continue // ignore: invalid key-length\n      else {\n        var key = b.slice(0, i).toString().toLowerCase()\n        if (key in data) continue // ignore: overwriting not allowed\n        data[key] = binary ? b.slice(i + 1) : b.slice(i + 1).toString()\n      }\n    }\n\n    that.decode.bytes = offset - oldOffset\n    return data\n  }\n\n  that.encodingLength = function (data) {\n    if (!data) return 1 // 1 byte (single empty byte)\n    var keys = Object.keys(data)\n    if (keys.length === 0) return 1 // 1 byte (single empty byte)\n    return keys.reduce(function (total, key) {\n      var val = data[key]\n      total += Buffer.byteLength(key) + 1 // +1 byte to store field length\n      if (Buffer.isBuffer(val)) total += val.length + 1 // +1 byte to fit equal sign\n      else if (val !== true) total += Buffer.byteLength(String(val)) + 1 // +1 byte to fit equal sign\n      return total\n    }, 0)\n  }\n\n  return that\n}\n\nfunction decodeBlock (buf, offset) {\n  var len = buf[offset]\n  var to = offset + 1 + len\n  var b = buf.slice(offset + 1, to > buf.length ? buf.length : to)\n  decodeBlock.bytes = len + 1\n  return b\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/dns-txt/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/dns-txt/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}}],"sources":{"node_modules/dns-txt/index.js":"'use strict'\n\nvar bindexOf = require('buffer-indexof')\n\nvar equalSign = new Buffer('=')\n\nmodule.exports = function (opts) {\n  var binary = opts ? opts.binary : false\n  var that = {}\n\n  that.encode = function (data, buf, offset) {\n    if (!data) data = {}\n    if (!offset) offset = 0\n    if (!buf) buf = new Buffer(that.encodingLength(data) + offset)\n\n    var oldOffset = offset\n    var keys = Object.keys(data)\n\n    if (keys.length === 0) {\n      buf[offset] = 0\n      offset++\n    }\n\n    keys.forEach(function (key) {\n      var val = data[key]\n      var oldOffset = offset\n      offset++\n\n      if (val === true) {\n        offset += buf.write(key, offset)\n      } else if (Buffer.isBuffer(val)) {\n        offset += buf.write(key + '=', offset)\n        var len = val.length\n        val.copy(buf, offset, 0, len)\n        offset += len\n      } else {\n        offset += buf.write(key + '=' + val, offset)\n      }\n\n      buf[oldOffset] = offset - oldOffset - 1\n    })\n\n    that.encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  that.decode = function (buf, offset, len) {\n    if (!offset) offset = 0\n    if (!Number.isFinite(len)) len = buf.length\n    var data = {}\n    var oldOffset = offset\n\n    while (offset < len) {\n      var b = decodeBlock(buf, offset)\n      var i = bindexOf(b, equalSign)\n      offset += decodeBlock.bytes\n\n      if (b.length === 0) continue // ignore: most likely a single zero byte\n      if (i === -1) data[b.toString().toLowerCase()] = true\n      else if (i === 0) continue // ignore: invalid key-length\n      else {\n        var key = b.slice(0, i).toString().toLowerCase()\n        if (key in data) continue // ignore: overwriting not allowed\n        data[key] = binary ? b.slice(i + 1) : b.slice(i + 1).toString()\n      }\n    }\n\n    that.decode.bytes = offset - oldOffset\n    return data\n  }\n\n  that.encodingLength = function (data) {\n    if (!data) return 1 // 1 byte (single empty byte)\n    var keys = Object.keys(data)\n    if (keys.length === 0) return 1 // 1 byte (single empty byte)\n    return keys.reduce(function (total, key) {\n      var val = data[key]\n      total += Buffer.byteLength(key) + 1 // +1 byte to store field length\n      if (Buffer.isBuffer(val)) total += val.length + 1 // +1 byte to fit equal sign\n      else if (val !== true) total += Buffer.byteLength(String(val)) + 1 // +1 byte to fit equal sign\n      return total\n    }, 0)\n  }\n\n  return that\n}\n\nfunction decodeBlock (buf, offset) {\n  var len = buf[offset]\n  var to = offset + 1 + len\n  var b = buf.slice(offset + 1, to > buf.length ? buf.length : to)\n  decodeBlock.bytes = len + 1\n  return b\n}\n"},"lineCount":96}},"error":null,"hash":"52d0df37c7adb4e904dd0003d6c73125","cacheData":{"env":{}}}