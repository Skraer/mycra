{"id":"node_modules/@bcoe/v8-coverage/dist/lib/clone.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Creates a deep copy of a process coverage.\n *\n * @param processCov Process coverage to clone.\n * @return Cloned process coverage.\n */\nfunction cloneProcessCov(processCov) {\n    const result = [];\n    for (const scriptCov of processCov.result) {\n        result.push(cloneScriptCov(scriptCov));\n    }\n    return {\n        result,\n    };\n}\nexports.cloneProcessCov = cloneProcessCov;\n/**\n * Creates a deep copy of a script coverage.\n *\n * @param scriptCov Script coverage to clone.\n * @return Cloned script coverage.\n */\nfunction cloneScriptCov(scriptCov) {\n    const functions = [];\n    for (const functionCov of scriptCov.functions) {\n        functions.push(cloneFunctionCov(functionCov));\n    }\n    return {\n        scriptId: scriptCov.scriptId,\n        url: scriptCov.url,\n        functions,\n    };\n}\nexports.cloneScriptCov = cloneScriptCov;\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param functionCov Function coverage to clone.\n * @return Cloned function coverage.\n */\nfunction cloneFunctionCov(functionCov) {\n    const ranges = [];\n    for (const rangeCov of functionCov.ranges) {\n        ranges.push(cloneRangeCov(rangeCov));\n    }\n    return {\n        functionName: functionCov.functionName,\n        ranges,\n        isBlockCoverage: functionCov.isBlockCoverage,\n    };\n}\nexports.cloneFunctionCov = cloneFunctionCov;\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param rangeCov Range coverage to clone.\n * @return Cloned range coverage.\n */\nfunction cloneRangeCov(rangeCov) {\n    return {\n        startOffset: rangeCov.startOffset,\n        endOffset: rangeCov.endOffset,\n        count: rangeCov.count,\n    };\n}\nexports.cloneRangeCov = cloneRangeCov;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["_src/clone.ts"],"names":[],"mappings":";;AAEA;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,UAAgC;IAC9D,MAAM,MAAM,GAAgB,EAAE,CAAC;IAC/B,KAAK,MAAM,SAAS,IAAI,UAAU,CAAC,MAAM,EAAE;QACzC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;KACxC;IAED,OAAO;QACL,MAAM;KACP,CAAC;AACJ,CAAC;AATD,0CASC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,SAA8B;IAC3D,MAAM,SAAS,GAAkB,EAAE,CAAC;IACpC,KAAK,MAAM,WAAW,IAAI,SAAS,CAAC,SAAS,EAAE;QAC7C,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;KAC/C;IAED,OAAO;QACL,QAAQ,EAAE,SAAS,CAAC,QAAQ;QAC5B,GAAG,EAAE,SAAS,CAAC,GAAG;QAClB,SAAS;KACV,CAAC;AACJ,CAAC;AAXD,wCAWC;AAED;;;;;GAKG;AACH,SAAgB,gBAAgB,CAAC,WAAkC;IACjE,MAAM,MAAM,GAAe,EAAE,CAAC;IAC9B,KAAK,MAAM,QAAQ,IAAI,WAAW,CAAC,MAAM,EAAE;QACzC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;KACtC;IAED,OAAO;QACL,YAAY,EAAE,WAAW,CAAC,YAAY;QACtC,MAAM;QACN,eAAe,EAAE,WAAW,CAAC,eAAe;KAC7C,CAAC;AACJ,CAAC;AAXD,4CAWC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,QAA4B;IACxD,OAAO;QACL,WAAW,EAAE,QAAQ,CAAC,WAAW;QACjC,SAAS,EAAE,QAAQ,CAAC,SAAS;QAC7B,KAAK,EAAE,QAAQ,CAAC,KAAK;KACtB,CAAC;AACJ,CAAC;AAND,sCAMC","file":"clone.js","sourcesContent":["import { FunctionCov, ProcessCov, RangeCov, ScriptCov } from \"./types\";\n\n/**\n * Creates a deep copy of a process coverage.\n *\n * @param processCov Process coverage to clone.\n * @return Cloned process coverage.\n */\nexport function cloneProcessCov(processCov: Readonly<ProcessCov>): ProcessCov {\n  const result: ScriptCov[] = [];\n  for (const scriptCov of processCov.result) {\n    result.push(cloneScriptCov(scriptCov));\n  }\n\n  return {\n    result,\n  };\n}\n\n/**\n * Creates a deep copy of a script coverage.\n *\n * @param scriptCov Script coverage to clone.\n * @return Cloned script coverage.\n */\nexport function cloneScriptCov(scriptCov: Readonly<ScriptCov>): ScriptCov {\n  const functions: FunctionCov[] = [];\n  for (const functionCov of scriptCov.functions) {\n    functions.push(cloneFunctionCov(functionCov));\n  }\n\n  return {\n    scriptId: scriptCov.scriptId,\n    url: scriptCov.url,\n    functions,\n  };\n}\n\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param functionCov Function coverage to clone.\n * @return Cloned function coverage.\n */\nexport function cloneFunctionCov(functionCov: Readonly<FunctionCov>): FunctionCov {\n  const ranges: RangeCov[] = [];\n  for (const rangeCov of functionCov.ranges) {\n    ranges.push(cloneRangeCov(rangeCov));\n  }\n\n  return {\n    functionName: functionCov.functionName,\n    ranges,\n    isBlockCoverage: functionCov.isBlockCoverage,\n  };\n}\n\n/**\n * Creates a deep copy of a function coverage.\n *\n * @param rangeCov Range coverage to clone.\n * @return Cloned range coverage.\n */\nexport function cloneRangeCov(rangeCov: Readonly<RangeCov>): RangeCov {\n  return {\n    startOffset: rangeCov.startOffset,\n    endOffset: rangeCov.endOffset,\n    count: rangeCov.count,\n  };\n}\n"],"sourceRoot":""}},"error":null,"hash":"9b160832bdac297cb044daf758e3ecc6","cacheData":{"env":{}}}