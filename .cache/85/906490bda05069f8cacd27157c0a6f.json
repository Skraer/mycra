{"id":"node_modules/@bcoe/v8-coverage/dist/lib/merge.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/package.json","includedInParent":true,"mtime":499162500000},{"name":"./normalize","loc":{"line":3,"column":28},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/merge.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/normalize.js"},{"name":"./range-tree","loc":{"line":4,"column":29},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/merge.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/@bcoe/v8-coverage/dist/lib/range-tree.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst normalize_1 = require(\"./normalize\");\nconst range_tree_1 = require(\"./range-tree\");\n/**\n * Merges a list of process coverages.\n *\n * The result is normalized.\n * The input values may be mutated, it is not safe to use them after passing\n * them to this function.\n * The computation is synchronous.\n *\n * @param processCovs Process coverages to merge.\n * @return Merged process coverage.\n */\nfunction mergeProcessCovs(processCovs) {\n    if (processCovs.length === 0) {\n        return { result: [] };\n    }\n    const urlToScripts = new Map();\n    for (const processCov of processCovs) {\n        for (const scriptCov of processCov.result) {\n            let scriptCovs = urlToScripts.get(scriptCov.url);\n            if (scriptCovs === undefined) {\n                scriptCovs = [];\n                urlToScripts.set(scriptCov.url, scriptCovs);\n            }\n            scriptCovs.push(scriptCov);\n        }\n    }\n    const result = [];\n    for (const scripts of urlToScripts.values()) {\n        // assert: `scripts.length > 0`\n        result.push(mergeScriptCovs(scripts));\n    }\n    const merged = { result };\n    normalize_1.normalizeProcessCov(merged);\n    return merged;\n}\nexports.mergeProcessCovs = mergeProcessCovs;\n/**\n * Merges a list of matching script coverages.\n *\n * Scripts are matching if they have the same `url`.\n * The result is normalized.\n * The input values may be mutated, it is not safe to use them after passing\n * them to this function.\n * The computation is synchronous.\n *\n * @param scriptCovs Process coverages to merge.\n * @return Merged script coverage, or `undefined` if the input list was empty.\n */\nfunction mergeScriptCovs(scriptCovs) {\n    if (scriptCovs.length === 0) {\n        return undefined;\n    }\n    else if (scriptCovs.length === 1) {\n        const merged = scriptCovs[0];\n        normalize_1.deepNormalizeScriptCov(merged);\n        return merged;\n    }\n    const first = scriptCovs[0];\n    const scriptId = first.scriptId;\n    const url = first.url;\n    const rangeToFuncs = new Map();\n    for (const scriptCov of scriptCovs) {\n        for (const funcCov of scriptCov.functions) {\n            const rootRange = stringifyFunctionRootRange(funcCov);\n            let funcCovs = rangeToFuncs.get(rootRange);\n            if (funcCovs === undefined ||\n                // if the entry in rangeToFuncs is function-level granularity and\n                // the new coverage is block-level, prefer block-level.\n                (!funcCovs[0].isBlockCoverage && funcCov.isBlockCoverage)) {\n                funcCovs = [];\n                rangeToFuncs.set(rootRange, funcCovs);\n            }\n            else if (funcCovs[0].isBlockCoverage && !funcCov.isBlockCoverage) {\n                // if the entry in rangeToFuncs is block-level granularity, we should\n                // not append function level granularity.\n                continue;\n            }\n            funcCovs.push(funcCov);\n        }\n    }\n    const functions = [];\n    for (const funcCovs of rangeToFuncs.values()) {\n        // assert: `funcCovs.length > 0`\n        functions.push(mergeFunctionCovs(funcCovs));\n    }\n    const merged = { scriptId, url, functions };\n    normalize_1.normalizeScriptCov(merged);\n    return merged;\n}\nexports.mergeScriptCovs = mergeScriptCovs;\n/**\n * Returns a string representation of the root range of the function.\n *\n * This string can be used to match function with same root range.\n * The string is derived from the start and end offsets of the root range of\n * the function.\n * This assumes that `ranges` is non-empty (true for valid function coverages).\n *\n * @param funcCov Function coverage with the range to stringify\n * @internal\n */\nfunction stringifyFunctionRootRange(funcCov) {\n    const rootRange = funcCov.ranges[0];\n    return `${rootRange.startOffset.toString(10)};${rootRange.endOffset.toString(10)}`;\n}\n/**\n * Merges a list of matching function coverages.\n *\n * Functions are matching if their root ranges have the same span.\n * The result is normalized.\n * The input values may be mutated, it is not safe to use them after passing\n * them to this function.\n * The computation is synchronous.\n *\n * @param funcCovs Function coverages to merge.\n * @return Merged function coverage, or `undefined` if the input list was empty.\n */\nfunction mergeFunctionCovs(funcCovs) {\n    if (funcCovs.length === 0) {\n        return undefined;\n    }\n    else if (funcCovs.length === 1) {\n        const merged = funcCovs[0];\n        normalize_1.normalizeFunctionCov(merged);\n        return merged;\n    }\n    const functionName = funcCovs[0].functionName;\n    const trees = [];\n    for (const funcCov of funcCovs) {\n        // assert: `fn.ranges.length > 0`\n        // assert: `fn.ranges` is sorted\n        trees.push(range_tree_1.RangeTree.fromSortedRanges(funcCov.ranges));\n    }\n    // assert: `trees.length > 0`\n    const mergedTree = mergeRangeTrees(trees);\n    normalize_1.normalizeRangeTree(mergedTree);\n    const ranges = mergedTree.toRanges();\n    const isBlockCoverage = !(ranges.length === 1 && ranges[0].count === 0);\n    const merged = { functionName, ranges, isBlockCoverage };\n    // assert: `merged` is normalized\n    return merged;\n}\nexports.mergeFunctionCovs = mergeFunctionCovs;\n/**\n * @precondition Same `start` and `end` for all the trees\n */\nfunction mergeRangeTrees(trees) {\n    if (trees.length <= 1) {\n        return trees[0];\n    }\n    const first = trees[0];\n    let delta = 0;\n    for (const tree of trees) {\n        delta += tree.delta;\n    }\n    const children = mergeRangeTreeChildren(trees);\n    return new range_tree_1.RangeTree(first.start, first.end, delta, children);\n}\nclass RangeTreeWithParent {\n    constructor(parentIndex, tree) {\n        this.parentIndex = parentIndex;\n        this.tree = tree;\n    }\n}\nclass StartEvent {\n    constructor(offset, trees) {\n        this.offset = offset;\n        this.trees = trees;\n    }\n    static compare(a, b) {\n        return a.offset - b.offset;\n    }\n}\nclass StartEventQueue {\n    constructor(queue) {\n        this.queue = queue;\n        this.nextIndex = 0;\n        this.pendingOffset = 0;\n        this.pendingTrees = undefined;\n    }\n    static fromParentTrees(parentTrees) {\n        const startToTrees = new Map();\n        for (const [parentIndex, parentTree] of parentTrees.entries()) {\n            for (const child of parentTree.children) {\n                let trees = startToTrees.get(child.start);\n                if (trees === undefined) {\n                    trees = [];\n                    startToTrees.set(child.start, trees);\n                }\n                trees.push(new RangeTreeWithParent(parentIndex, child));\n            }\n        }\n        const queue = [];\n        for (const [startOffset, trees] of startToTrees) {\n            queue.push(new StartEvent(startOffset, trees));\n        }\n        queue.sort(StartEvent.compare);\n        return new StartEventQueue(queue);\n    }\n    setPendingOffset(offset) {\n        this.pendingOffset = offset;\n    }\n    pushPendingTree(tree) {\n        if (this.pendingTrees === undefined) {\n            this.pendingTrees = [];\n        }\n        this.pendingTrees.push(tree);\n    }\n    next() {\n        const pendingTrees = this.pendingTrees;\n        const nextEvent = this.queue[this.nextIndex];\n        if (pendingTrees === undefined) {\n            this.nextIndex++;\n            return nextEvent;\n        }\n        else if (nextEvent === undefined) {\n            this.pendingTrees = undefined;\n            return new StartEvent(this.pendingOffset, pendingTrees);\n        }\n        else {\n            if (this.pendingOffset < nextEvent.offset) {\n                this.pendingTrees = undefined;\n                return new StartEvent(this.pendingOffset, pendingTrees);\n            }\n            else {\n                if (this.pendingOffset === nextEvent.offset) {\n                    this.pendingTrees = undefined;\n                    for (const tree of pendingTrees) {\n                        nextEvent.trees.push(tree);\n                    }\n                }\n                this.nextIndex++;\n                return nextEvent;\n            }\n        }\n    }\n}\nfunction mergeRangeTreeChildren(parentTrees) {\n    const result = [];\n    const startEventQueue = StartEventQueue.fromParentTrees(parentTrees);\n    const parentToNested = new Map();\n    let openRange;\n    while (true) {\n        const event = startEventQueue.next();\n        if (event === undefined) {\n            break;\n        }\n        if (openRange !== undefined && openRange.end <= event.offset) {\n            result.push(nextChild(openRange, parentToNested));\n            openRange = undefined;\n        }\n        if (openRange === undefined) {\n            let openRangeEnd = event.offset + 1;\n            for (const { parentIndex, tree } of event.trees) {\n                openRangeEnd = Math.max(openRangeEnd, tree.end);\n                insertChild(parentToNested, parentIndex, tree);\n            }\n            startEventQueue.setPendingOffset(openRangeEnd);\n            openRange = { start: event.offset, end: openRangeEnd };\n        }\n        else {\n            for (const { parentIndex, tree } of event.trees) {\n                if (tree.end > openRange.end) {\n                    const right = tree.split(openRange.end);\n                    startEventQueue.pushPendingTree(new RangeTreeWithParent(parentIndex, right));\n                }\n                insertChild(parentToNested, parentIndex, tree);\n            }\n        }\n    }\n    if (openRange !== undefined) {\n        result.push(nextChild(openRange, parentToNested));\n    }\n    return result;\n}\nfunction insertChild(parentToNested, parentIndex, tree) {\n    let nested = parentToNested.get(parentIndex);\n    if (nested === undefined) {\n        nested = [];\n        parentToNested.set(parentIndex, nested);\n    }\n    nested.push(tree);\n}\nfunction nextChild(openRange, parentToNested) {\n    const matchingTrees = [];\n    for (const nested of parentToNested.values()) {\n        if (nested.length === 1 && nested[0].start === openRange.start && nested[0].end === openRange.end) {\n            matchingTrees.push(nested[0]);\n        }\n        else {\n            matchingTrees.push(new range_tree_1.RangeTree(openRange.start, openRange.end, 0, nested));\n        }\n    }\n    parentToNested.clear();\n    return mergeRangeTrees(matchingTrees);\n}\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["_src/merge.ts"],"names":[],"mappings":";;AAAA,2CAMqB;AACrB,6CAAyC;AAGzC;;;;;;;;;;GAUG;AACH,SAAgB,gBAAgB,CAAC,WAAsC;IACrE,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,OAAO,EAAC,MAAM,EAAE,EAAE,EAAC,CAAC;KACrB;IAED,MAAM,YAAY,GAA6B,IAAI,GAAG,EAAE,CAAC;IACzD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,KAAK,MAAM,SAAS,IAAI,UAAU,CAAC,MAAM,EAAE;YACzC,IAAI,UAAU,GAA4B,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC1E,IAAI,UAAU,KAAK,SAAS,EAAE;gBAC5B,UAAU,GAAG,EAAE,CAAC;gBAChB,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;aAC7C;YACD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5B;KACF;IAED,MAAM,MAAM,GAAgB,EAAE,CAAC;IAC/B,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,MAAM,EAAE,EAAE;QAC3C,+BAA+B;QAC/B,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAE,CAAC,CAAC;KACxC;IACD,MAAM,MAAM,GAAe,EAAC,MAAM,EAAC,CAAC;IAEpC,+BAAmB,CAAC,MAAM,CAAC,CAAC;IAC5B,OAAO,MAAM,CAAC;AAChB,CAAC;AA1BD,4CA0BC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,eAAe,CAAC,UAAoC;IAClE,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,SAAS,CAAC;KAClB;SAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAClC,MAAM,MAAM,GAAc,UAAU,CAAC,CAAC,CAAC,CAAC;QACxC,kCAAsB,CAAC,MAAM,CAAC,CAAC;QAC/B,OAAO,MAAM,CAAC;KACf;IAED,MAAM,KAAK,GAAc,UAAU,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,QAAQ,GAAW,KAAK,CAAC,QAAQ,CAAC;IACxC,MAAM,GAAG,GAAW,KAAK,CAAC,GAAG,CAAC;IAE9B,MAAM,YAAY,GAA+B,IAAI,GAAG,EAAE,CAAC;IAC3D,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;QAClC,KAAK,MAAM,OAAO,IAAI,SAAS,CAAC,SAAS,EAAE;YACzC,MAAM,SAAS,GAAW,0BAA0B,CAAC,OAAO,CAAC,CAAC;YAC9D,IAAI,QAAQ,GAA8B,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEtE,IAAI,QAAQ,KAAK,SAAS;gBACxB,iEAAiE;gBACjE,uDAAuD;gBACvD,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAe,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;gBAC3D,QAAQ,GAAG,EAAE,CAAC;gBACd,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;aACvC;iBAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAe,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;gBAClE,qEAAqE;gBACrE,yCAAyC;gBACzC,SAAS;aACV;YACD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxB;KACF;IAED,MAAM,SAAS,GAAkB,EAAE,CAAC;IACpC,KAAK,MAAM,QAAQ,IAAI,YAAY,CAAC,MAAM,EAAE,EAAE;QAC5C,gCAAgC;QAChC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAE,CAAC,CAAC;KAC9C;IAED,MAAM,MAAM,GAAc,EAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAC,CAAC;IACrD,8BAAkB,CAAC,MAAM,CAAC,CAAC;IAC3B,OAAO,MAAM,CAAC;AAChB,CAAC;AA3CD,0CA2CC;AAED;;;;;;;;;;GAUG;AACH,SAAS,0BAA0B,CAAC,OAA8B;IAChE,MAAM,SAAS,GAAa,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9C,OAAO,GAAG,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;AACrF,CAAC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,iBAAiB,CAAC,QAAoC;IACpE,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,OAAO,SAAS,CAAC;KAClB;SAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,MAAM,GAAgB,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxC,gCAAoB,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,MAAM,CAAC;KACf;IAED,MAAM,YAAY,GAAW,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAEtD,MAAM,KAAK,GAAgB,EAAE,CAAC;IAC9B,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,iCAAiC;QACjC,gCAAgC;QAChC,KAAK,CAAC,IAAI,CAAC,sBAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAE,CAAC,CAAC;KACzD;IAED,6BAA6B;IAC7B,MAAM,UAAU,GAAc,eAAe,CAAC,KAAK,CAAE,CAAC;IACtD,8BAAkB,CAAC,UAAU,CAAC,CAAC;IAC/B,MAAM,MAAM,GAAe,UAAU,CAAC,QAAQ,EAAE,CAAC;IACjD,MAAM,eAAe,GAAY,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IAEjF,MAAM,MAAM,GAAgB,EAAC,YAAY,EAAE,MAAM,EAAE,eAAe,EAAC,CAAC;IACpE,iCAAiC;IACjC,OAAO,MAAM,CAAC;AAChB,CAAC;AA3BD,8CA2BC;AAED;;GAEG;AACH,SAAS,eAAe,CAAC,KAA+B;IACtD,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;QACrB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;KACjB;IACD,MAAM,KAAK,GAAc,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC,IAAI,KAAK,GAAW,CAAC,CAAC;IACtB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;KACrB;IACD,MAAM,QAAQ,GAAgB,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAC5D,OAAO,IAAI,sBAAS,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,mBAAmB;IAIvB,YAAY,WAAmB,EAAE,IAAe;QAC9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF;AAED,MAAM,UAAU;IAId,YAAY,MAAc,EAAE,KAA4B;QACtD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,CAAa,EAAE,CAAa;QACzC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7B,CAAC;CACF;AAED,MAAM,eAAe;IAMnB,YAAoB,KAAmB;QACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,WAAqC;QAC1D,MAAM,YAAY,GAAuC,IAAI,GAAG,EAAE,CAAC;QACnE,KAAK,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE;YAC7D,KAAK,MAAM,KAAK,IAAI,UAAU,CAAC,QAAQ,EAAE;gBACvC,IAAI,KAAK,GAAsC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC7E,IAAI,KAAK,KAAK,SAAS,EAAE;oBACvB,KAAK,GAAG,EAAE,CAAC;oBACX,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;iBACtC;gBACD,KAAK,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;aACzD;SACF;QACD,MAAM,KAAK,GAAiB,EAAE,CAAC;QAC/B,KAAK,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,YAAY,EAAE;YAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;SAChD;QACD,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,gBAAgB,CAAC,MAAc;QAC7B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACnC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI;QACF,MAAM,YAAY,GAAsC,IAAI,CAAC,YAAY,CAAC;QAC1E,MAAM,SAAS,GAA2B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrE,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO,SAAS,CAAC;SAClB;aAAM,IAAI,SAAS,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAC9B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;SACzD;aAAM;YACL,IAAI,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE;gBACzC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;gBAC9B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;aACzD;iBAAM;gBACL,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,CAAC,MAAM,EAAE;oBAC3C,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;oBAC9B,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;wBAC/B,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC5B;iBACF;gBACD,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,OAAO,SAAS,CAAC;aAClB;SACF;IACH,CAAC;CACF;AAED,SAAS,sBAAsB,CAAC,WAAqC;IACnE,MAAM,MAAM,GAAgB,EAAE,CAAC;IAC/B,MAAM,eAAe,GAAoB,eAAe,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;IACtF,MAAM,cAAc,GAA6B,IAAI,GAAG,EAAE,CAAC;IAC3D,IAAI,SAA4B,CAAC;IAEjC,OAAO,IAAI,EAAE;QACX,MAAM,KAAK,GAA2B,eAAe,CAAC,IAAI,EAAE,CAAC;QAC7D,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,MAAM;SACP;QAED,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE;YAC5D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;YAClD,SAAS,GAAG,SAAS,CAAC;SACvB;QAED,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,IAAI,YAAY,GAAW,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5C,KAAK,MAAM,EAAC,WAAW,EAAE,IAAI,EAAC,IAAI,KAAK,CAAC,KAAK,EAAE;gBAC7C,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChD,WAAW,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;aAChD;YACD,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAC/C,SAAS,GAAG,EAAC,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,EAAC,CAAC;SACtD;aAAM;YACL,KAAK,MAAM,EAAC,WAAW,EAAE,IAAI,EAAC,IAAI,KAAK,CAAC,KAAK,EAAE;gBAC7C,IAAI,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE;oBAC5B,MAAM,KAAK,GAAc,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACnD,eAAe,CAAC,eAAe,CAAC,IAAI,mBAAmB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;iBAC9E;gBACD,WAAW,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;aAChD;SACF;KACF;IACD,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;KACnD;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,WAAW,CAAC,cAAwC,EAAE,WAAmB,EAAE,IAAe;IACjG,IAAI,MAAM,GAA4B,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACtE,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,MAAM,GAAG,EAAE,CAAC;QACZ,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KACzC;IACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,SAAS,SAAS,CAAC,SAAgB,EAAE,cAAwC;IAC3E,MAAM,aAAa,GAAgB,EAAE,CAAC;IAEtC,KAAK,MAAM,MAAM,IAAI,cAAc,CAAC,MAAM,EAAE,EAAE;QAC5C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,EAAE;YACjG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B;aAAM;YACL,aAAa,CAAC,IAAI,CAAC,IAAI,sBAAS,CAC9B,SAAS,CAAC,KAAK,EACf,SAAS,CAAC,GAAG,EACb,CAAC,EACD,MAAM,CACP,CAAC,CAAC;SACJ;KACF;IACD,cAAc,CAAC,KAAK,EAAE,CAAC;IACvB,OAAO,eAAe,CAAC,aAAa,CAAE,CAAC;AACzC,CAAC","file":"merge.js","sourcesContent":["import {\n  deepNormalizeScriptCov,\n  normalizeFunctionCov,\n  normalizeProcessCov,\n  normalizeRangeTree,\n  normalizeScriptCov,\n} from \"./normalize\";\nimport { RangeTree } from \"./range-tree\";\nimport { FunctionCov, ProcessCov, Range, RangeCov, ScriptCov } from \"./types\";\n\n/**\n * Merges a list of process coverages.\n *\n * The result is normalized.\n * The input values may be mutated, it is not safe to use them after passing\n * them to this function.\n * The computation is synchronous.\n *\n * @param processCovs Process coverages to merge.\n * @return Merged process coverage.\n */\nexport function mergeProcessCovs(processCovs: ReadonlyArray<ProcessCov>): ProcessCov {\n  if (processCovs.length === 0) {\n    return {result: []};\n  }\n\n  const urlToScripts: Map<string, ScriptCov[]> = new Map();\n  for (const processCov of processCovs) {\n    for (const scriptCov of processCov.result) {\n      let scriptCovs: ScriptCov[] | undefined = urlToScripts.get(scriptCov.url);\n      if (scriptCovs === undefined) {\n        scriptCovs = [];\n        urlToScripts.set(scriptCov.url, scriptCovs);\n      }\n      scriptCovs.push(scriptCov);\n    }\n  }\n\n  const result: ScriptCov[] = [];\n  for (const scripts of urlToScripts.values()) {\n    // assert: `scripts.length > 0`\n    result.push(mergeScriptCovs(scripts)!);\n  }\n  const merged: ProcessCov = {result};\n\n  normalizeProcessCov(merged);\n  return merged;\n}\n\n/**\n * Merges a list of matching script coverages.\n *\n * Scripts are matching if they have the same `url`.\n * The result is normalized.\n * The input values may be mutated, it is not safe to use them after passing\n * them to this function.\n * The computation is synchronous.\n *\n * @param scriptCovs Process coverages to merge.\n * @return Merged script coverage, or `undefined` if the input list was empty.\n */\nexport function mergeScriptCovs(scriptCovs: ReadonlyArray<ScriptCov>): ScriptCov | undefined {\n  if (scriptCovs.length === 0) {\n    return undefined;\n  } else if (scriptCovs.length === 1) {\n    const merged: ScriptCov = scriptCovs[0];\n    deepNormalizeScriptCov(merged);\n    return merged;\n  }\n\n  const first: ScriptCov = scriptCovs[0];\n  const scriptId: string = first.scriptId;\n  const url: string = first.url;\n\n  const rangeToFuncs: Map<string, FunctionCov[]> = new Map();\n  for (const scriptCov of scriptCovs) {\n    for (const funcCov of scriptCov.functions) {\n      const rootRange: string = stringifyFunctionRootRange(funcCov);\n      let funcCovs: FunctionCov[] | undefined = rangeToFuncs.get(rootRange);\n\n      if (funcCovs === undefined ||\n        // if the entry in rangeToFuncs is function-level granularity and\n        // the new coverage is block-level, prefer block-level.\n        (!funcCovs[0].isBlockCoverage && funcCov.isBlockCoverage)) {\n        funcCovs = [];\n        rangeToFuncs.set(rootRange, funcCovs);\n      } else if (funcCovs[0].isBlockCoverage && !funcCov.isBlockCoverage) {\n        // if the entry in rangeToFuncs is block-level granularity, we should\n        // not append function level granularity.\n        continue;\n      }\n      funcCovs.push(funcCov);\n    }\n  }\n\n  const functions: FunctionCov[] = [];\n  for (const funcCovs of rangeToFuncs.values()) {\n    // assert: `funcCovs.length > 0`\n    functions.push(mergeFunctionCovs(funcCovs)!);\n  }\n\n  const merged: ScriptCov = {scriptId, url, functions};\n  normalizeScriptCov(merged);\n  return merged;\n}\n\n/**\n * Returns a string representation of the root range of the function.\n *\n * This string can be used to match function with same root range.\n * The string is derived from the start and end offsets of the root range of\n * the function.\n * This assumes that `ranges` is non-empty (true for valid function coverages).\n *\n * @param funcCov Function coverage with the range to stringify\n * @internal\n */\nfunction stringifyFunctionRootRange(funcCov: Readonly<FunctionCov>): string {\n  const rootRange: RangeCov = funcCov.ranges[0];\n  return `${rootRange.startOffset.toString(10)};${rootRange.endOffset.toString(10)}`;\n}\n\n/**\n * Merges a list of matching function coverages.\n *\n * Functions are matching if their root ranges have the same span.\n * The result is normalized.\n * The input values may be mutated, it is not safe to use them after passing\n * them to this function.\n * The computation is synchronous.\n *\n * @param funcCovs Function coverages to merge.\n * @return Merged function coverage, or `undefined` if the input list was empty.\n */\nexport function mergeFunctionCovs(funcCovs: ReadonlyArray<FunctionCov>): FunctionCov | undefined {\n  if (funcCovs.length === 0) {\n    return undefined;\n  } else if (funcCovs.length === 1) {\n    const merged: FunctionCov = funcCovs[0];\n    normalizeFunctionCov(merged);\n    return merged;\n  }\n\n  const functionName: string = funcCovs[0].functionName;\n\n  const trees: RangeTree[] = [];\n  for (const funcCov of funcCovs) {\n    // assert: `fn.ranges.length > 0`\n    // assert: `fn.ranges` is sorted\n    trees.push(RangeTree.fromSortedRanges(funcCov.ranges)!);\n  }\n\n  // assert: `trees.length > 0`\n  const mergedTree: RangeTree = mergeRangeTrees(trees)!;\n  normalizeRangeTree(mergedTree);\n  const ranges: RangeCov[] = mergedTree.toRanges();\n  const isBlockCoverage: boolean = !(ranges.length === 1 && ranges[0].count === 0);\n\n  const merged: FunctionCov = {functionName, ranges, isBlockCoverage};\n  // assert: `merged` is normalized\n  return merged;\n}\n\n/**\n * @precondition Same `start` and `end` for all the trees\n */\nfunction mergeRangeTrees(trees: ReadonlyArray<RangeTree>): RangeTree | undefined {\n  if (trees.length <= 1) {\n    return trees[0];\n  }\n  const first: RangeTree = trees[0];\n  let delta: number = 0;\n  for (const tree of trees) {\n    delta += tree.delta;\n  }\n  const children: RangeTree[] = mergeRangeTreeChildren(trees);\n  return new RangeTree(first.start, first.end, delta, children);\n}\n\nclass RangeTreeWithParent {\n  readonly parentIndex: number;\n  readonly tree: RangeTree;\n\n  constructor(parentIndex: number, tree: RangeTree) {\n    this.parentIndex = parentIndex;\n    this.tree = tree;\n  }\n}\n\nclass StartEvent {\n  readonly offset: number;\n  readonly trees: RangeTreeWithParent[];\n\n  constructor(offset: number, trees: RangeTreeWithParent[]) {\n    this.offset = offset;\n    this.trees = trees;\n  }\n\n  static compare(a: StartEvent, b: StartEvent): number {\n    return a.offset - b.offset;\n  }\n}\n\nclass StartEventQueue {\n  private readonly queue: StartEvent[];\n  private nextIndex: number;\n  private pendingOffset: number;\n  private pendingTrees: RangeTreeWithParent[] | undefined;\n\n  private constructor(queue: StartEvent[]) {\n    this.queue = queue;\n    this.nextIndex = 0;\n    this.pendingOffset = 0;\n    this.pendingTrees = undefined;\n  }\n\n  static fromParentTrees(parentTrees: ReadonlyArray<RangeTree>): StartEventQueue {\n    const startToTrees: Map<number, RangeTreeWithParent[]> = new Map();\n    for (const [parentIndex, parentTree] of parentTrees.entries()) {\n      for (const child of parentTree.children) {\n        let trees: RangeTreeWithParent[] | undefined = startToTrees.get(child.start);\n        if (trees === undefined) {\n          trees = [];\n          startToTrees.set(child.start, trees);\n        }\n        trees.push(new RangeTreeWithParent(parentIndex, child));\n      }\n    }\n    const queue: StartEvent[] = [];\n    for (const [startOffset, trees] of startToTrees) {\n      queue.push(new StartEvent(startOffset, trees));\n    }\n    queue.sort(StartEvent.compare);\n    return new StartEventQueue(queue);\n  }\n\n  setPendingOffset(offset: number): void {\n    this.pendingOffset = offset;\n  }\n\n  pushPendingTree(tree: RangeTreeWithParent): void {\n    if (this.pendingTrees === undefined) {\n      this.pendingTrees = [];\n    }\n    this.pendingTrees.push(tree);\n  }\n\n  next(): StartEvent | undefined {\n    const pendingTrees: RangeTreeWithParent[] | undefined = this.pendingTrees;\n    const nextEvent: StartEvent | undefined = this.queue[this.nextIndex];\n    if (pendingTrees === undefined) {\n      this.nextIndex++;\n      return nextEvent;\n    } else if (nextEvent === undefined) {\n      this.pendingTrees = undefined;\n      return new StartEvent(this.pendingOffset, pendingTrees);\n    } else {\n      if (this.pendingOffset < nextEvent.offset) {\n        this.pendingTrees = undefined;\n        return new StartEvent(this.pendingOffset, pendingTrees);\n      } else {\n        if (this.pendingOffset === nextEvent.offset) {\n          this.pendingTrees = undefined;\n          for (const tree of pendingTrees) {\n            nextEvent.trees.push(tree);\n          }\n        }\n        this.nextIndex++;\n        return nextEvent;\n      }\n    }\n  }\n}\n\nfunction mergeRangeTreeChildren(parentTrees: ReadonlyArray<RangeTree>): RangeTree[] {\n  const result: RangeTree[] = [];\n  const startEventQueue: StartEventQueue = StartEventQueue.fromParentTrees(parentTrees);\n  const parentToNested: Map<number, RangeTree[]> = new Map();\n  let openRange: Range | undefined;\n\n  while (true) {\n    const event: StartEvent | undefined = startEventQueue.next();\n    if (event === undefined) {\n      break;\n    }\n\n    if (openRange !== undefined && openRange.end <= event.offset) {\n      result.push(nextChild(openRange, parentToNested));\n      openRange = undefined;\n    }\n\n    if (openRange === undefined) {\n      let openRangeEnd: number = event.offset + 1;\n      for (const {parentIndex, tree} of event.trees) {\n        openRangeEnd = Math.max(openRangeEnd, tree.end);\n        insertChild(parentToNested, parentIndex, tree);\n      }\n      startEventQueue.setPendingOffset(openRangeEnd);\n      openRange = {start: event.offset, end: openRangeEnd};\n    } else {\n      for (const {parentIndex, tree} of event.trees) {\n        if (tree.end > openRange.end) {\n          const right: RangeTree = tree.split(openRange.end);\n          startEventQueue.pushPendingTree(new RangeTreeWithParent(parentIndex, right));\n        }\n        insertChild(parentToNested, parentIndex, tree);\n      }\n    }\n  }\n  if (openRange !== undefined) {\n    result.push(nextChild(openRange, parentToNested));\n  }\n\n  return result;\n}\n\nfunction insertChild(parentToNested: Map<number, RangeTree[]>, parentIndex: number, tree: RangeTree): void {\n  let nested: RangeTree[] | undefined = parentToNested.get(parentIndex);\n  if (nested === undefined) {\n    nested = [];\n    parentToNested.set(parentIndex, nested);\n  }\n  nested.push(tree);\n}\n\nfunction nextChild(openRange: Range, parentToNested: Map<number, RangeTree[]>): RangeTree {\n  const matchingTrees: RangeTree[] = [];\n\n  for (const nested of parentToNested.values()) {\n    if (nested.length === 1 && nested[0].start === openRange.start && nested[0].end === openRange.end) {\n      matchingTrees.push(nested[0]);\n    } else {\n      matchingTrees.push(new RangeTree(\n        openRange.start,\n        openRange.end,\n        0,\n        nested,\n      ));\n    }\n  }\n  parentToNested.clear();\n  return mergeRangeTrees(matchingTrees)!;\n}\n"],"sourceRoot":""}},"error":null,"hash":"9a84813a351da8c0e4679a88d5fefb9e","cacheData":{"env":{}}}