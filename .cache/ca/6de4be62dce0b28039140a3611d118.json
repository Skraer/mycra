{"id":"node_modules/bfj/src/read.js","dependencies":[{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/package.json","includedInParent":true,"mtime":1592223810651},{"name":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/bfj/package.json","includedInParent":true,"mtime":1591602462221},{"name":"fs","loc":{"line":3,"column":19},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/bfj/src/read.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"./parse","loc":{"line":4,"column":22},"parent":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/bfj/src/read.js","resolved":"/Users/ruslanidrisov/programming/projects/mycra/mycra/node_modules/bfj/src/parse.js"}],"generated":{"js":"'use strict';\n\nvar fs = require('fs');\n\nvar parse = require('./parse');\n\nmodule.exports = read;\n/**\n * Public function `read`.\n *\n * Returns a promise and asynchronously parses a JSON file read from disk. If\n * there are no errors, the promise is resolved with the parsed data. If errors\n * occur, the promise is rejected with the first error.\n *\n * @param path:       Path to the JSON file.\n *\n * @option reviver:   Transformation function, invoked depth-first.\n *\n * @option yieldRate: The number of data items to process per timeslice,\n *                    default is 16384.\n *\n * @option Promise:   The promise constructor to use, defaults to bluebird.\n **/\n\nfunction read(path, options) {\n  return parse(fs.createReadStream(path, options), Object.assign({}, options, {\n    ndjson: false\n  }));\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":0}},{"name":"fs","generated":{"line":3,"column":4},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":6}},{"generated":{"line":3,"column":6},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":8}},{"name":"require","generated":{"line":3,"column":9},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":11}},{"generated":{"line":3,"column":16},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":18}},{"generated":{"line":3,"column":17},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":19}},{"generated":{"line":3,"column":21},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":18}},{"generated":{"line":3,"column":22},"source":"node_modules/bfj/src/read.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":0}},{"name":"parse","generated":{"line":5,"column":4},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":6}},{"generated":{"line":5,"column":9},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":11}},{"name":"require","generated":{"line":5,"column":12},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":14}},{"generated":{"line":5,"column":19},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":21}},{"generated":{"line":5,"column":20},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":22}},{"generated":{"line":5,"column":29},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":21}},{"generated":{"line":5,"column":30},"source":"node_modules/bfj/src/read.js","original":{"line":4,"column":0}},{"name":"module","generated":{"line":7,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":6},"source":"node_modules/bfj/src/read.js","original":{"line":6,"column":6}},{"name":"exports","generated":{"line":7,"column":7},"source":"node_modules/bfj/src/read.js","original":{"line":6,"column":7}},{"generated":{"line":7,"column":14},"source":"node_modules/bfj/src/read.js","original":{"line":6,"column":0}},{"name":"read","generated":{"line":7,"column":17},"source":"node_modules/bfj/src/read.js","original":{"line":6,"column":17}},{"generated":{"line":7,"column":21},"source":"node_modules/bfj/src/read.js","original":{"line":6,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":8,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":0}},{"name":"read","generated":{"line":25,"column":9},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":9}},{"generated":{"line":25,"column":13},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":0}},{"name":"path","generated":{"line":25,"column":14},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":15}},{"generated":{"line":25,"column":18},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":0}},{"name":"options","generated":{"line":25,"column":20},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":21}},{"generated":{"line":25,"column":27},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":0}},{"generated":{"line":25,"column":29},"source":"node_modules/bfj/src/read.js","original":{"line":24,"column":30}},{"generated":{"line":26,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":2}},{"name":"parse","generated":{"line":26,"column":9},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":9}},{"generated":{"line":26,"column":14},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":14}},{"name":"fs","generated":{"line":26,"column":15},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":15}},{"generated":{"line":26,"column":17},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":17}},{"name":"createReadStream","generated":{"line":26,"column":18},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":18}},{"generated":{"line":26,"column":34},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":15}},{"name":"path","generated":{"line":26,"column":35},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":35}},{"generated":{"line":26,"column":39},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":15}},{"name":"options","generated":{"line":26,"column":41},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":41}},{"generated":{"line":26,"column":48},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":15}},{"generated":{"line":26,"column":49},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":14}},{"name":"Object","generated":{"line":26,"column":51},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":51}},{"generated":{"line":26,"column":57},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":57}},{"name":"assign","generated":{"line":26,"column":58},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":58}},{"generated":{"line":26,"column":64},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":51}},{"generated":{"line":26,"column":65},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":65}},{"generated":{"line":26,"column":67},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":51}},{"name":"options","generated":{"line":26,"column":69},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":69}},{"generated":{"line":26,"column":76},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":51}},{"generated":{"line":26,"column":78},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":78}},{"name":"ndjson","generated":{"line":27,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":80}},{"name":"ndjson","generated":{"line":27,"column":4},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":80}},{"generated":{"line":27,"column":10},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":86}},{"generated":{"line":27,"column":12},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":88}},{"generated":{"line":28,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":78}},{"generated":{"line":28,"column":3},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":51}},{"generated":{"line":28,"column":4},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":14}},{"generated":{"line":28,"column":5},"source":"node_modules/bfj/src/read.js","original":{"line":25,"column":2}},{"generated":{"line":29,"column":0},"source":"node_modules/bfj/src/read.js","original":{"line":26,"column":1}}],"sources":{"node_modules/bfj/src/read.js":"'use strict'\n\nconst fs = require('fs')\nconst parse = require('./parse')\n\nmodule.exports = read\n\n/**\n * Public function `read`.\n *\n * Returns a promise and asynchronously parses a JSON file read from disk. If\n * there are no errors, the promise is resolved with the parsed data. If errors\n * occur, the promise is rejected with the first error.\n *\n * @param path:       Path to the JSON file.\n *\n * @option reviver:   Transformation function, invoked depth-first.\n *\n * @option yieldRate: The number of data items to process per timeslice,\n *                    default is 16384.\n *\n * @option Promise:   The promise constructor to use, defaults to bluebird.\n **/\nfunction read (path, options) {\n  return parse(fs.createReadStream(path, options), Object.assign({}, options, { ndjson: false }))\n}\n"},"lineCount":null}},"error":null,"hash":"56e99f50c930052870c47ff9f702a8e8","cacheData":{"env":{}}}